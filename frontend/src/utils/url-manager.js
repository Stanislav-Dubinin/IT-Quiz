export class UrlManager {
    static getQueryParams() {
        const qs = document.location.hash.split('+').join(' ');

        let params = {},
            tokens,
            re = /[?&]([^=]+)=([^&]*)/g;

        while (tokens = re.exec(qs)) {
            params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
        }

        return params;
    }

    static checkUserData(params) {
        if (!params.name || !params.lastName || !params.email) {
            location.href = '#/';
        }
    }
}

/*Давайте разберем код шаг за шагом.

**Класс UrlManager**

Код определяет класс под названием `UrlManager` с двумя статическими методами: `getQueryParams` и `checkUserData`.

**Метод getQueryParams**

Этот метод извлекает параметры запроса из хеша URL (части после символа `#`). Вот как он работает:

1. `const qs = document.location.hash.split('+').join(' ');`: Эта строка берет хеш URL и заменяет все символы `+` на
пробелы. Это потому, что `+` используется для кодирования пробелов в URL, и мы хотим рассматривать их как пробелы.
2. `let params = {}, tokens, re = /[?&]([^=]+)=([^&]*)/g;`: Эта строка инициализирует пустой объект `params`
для хранения параметров запроса, и определяет регулярное выражение `re` для поиска пар ключ-значение в строке запроса.
3. `while (tokens = re.exec(qs)) { ... }`: Этот цикл перебирает строку запроса, используя регулярное выражение
для извлечения пар ключ-значение.
4. `params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);`: Для каждой пары ключ-значение код
декодирует ключ и значение с помощью `decodeURIComponent` и добавляет их в объект `params`.

Регулярное выражение `/[?&]([^=]+)=([^&]*)/g` разбивается следующим образом:

* `[?&]`: Сопоставляет либо символ `?`, либо символ `&`, которые отделяют пары ключ-значение в строке запроса.
* `([^=]+)`: Захватывает одну или более символов, которые не являются `=`, что представляет собой ключ.
* `=`: Сопоставляет символ `=`, который отделяет ключ от значения.
* `([^&]*)`: Захватывает ноль или более символов, которые не являются `&`, что представляет собой значение.
* `g`: Флаг `g` в конце регулярного выражения заставляет его сопоставлять все вхождения в строке, а не только первое.

**Метод checkUserData**

Этот метод проверяет, содержит ли объект `params` certain required fields: `name`, `lastName` и `email`.
Если какой-либо из этих полей отсутствует, он перенаправляет пользователя на корневой URL (`#/'`).

Вот как он работает:

1. `if (!params.name || !params.lastName || !params.email) { ... }`: Эта строка проверяет, отсутствует ли какой-либо
из required fields.
2. `location.href = '#/';`: Если какой-либо из полей отсутствует, код перенаправляет пользователя на корневой URL.

В целом, класс `UrlManager` предоставляет два метода: `getQueryParams` для извлечения параметров запроса из хеша URL,
 и `checkUserData` для проверки наличия certain required fields в параметрах запроса.*/